#!/bin/bash

# crowbar-backup
#
# A script to backup and restore a crowbar admin node.
# Currently it only supports crowbar on SUSE based distributions.
#
# This script is meant to _document_ the steps needed for a backup and
# restore. You might want to add additional steps.
#
# Enhancements are welcome at:
#   http://github.com/SUSE-Cloud/cloud-tools
#
#
# MIT License
# Copyright (c) 2013-2014, SUSE Linux Products GmbH
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


# files and directories to be backuped
CHEFFILES="etc/chef var/lib/couchdb/chef.couch var/lib/chef/cookbook_index"
CROWBARFILES="etc/crowbar var/lib/crowbar opt/dell/crowbar_framework/config/client.pem"
TFTPFILES="srv/tftpboot/validation.pem srv/tftpboot/nodes"
ROOTFILES="root/.chef root/.ssh root/.gnupg"
BFILES="$ROOTFILES $CHEFFILES $CROWBARFILES $TFTPFILES etc/resolv.conf.forwarders"

# files and directories to be excluded from backup
EXCLUDEFILES="var/lib/crowbar/cache"
XFILES=""
for X in $EXCLUDEFILES ; do
  XFILES="--exclude $X $XFILES"
done

# _domainname_ of a server for a ping and DNS test
# can be set via "export pingserver=ping.example.com"
PINGSERVER=${pingserver:-turing.suse.de}

# default backup file name
FILEDEF=/tmp/backup-crowbar.tar.gz

function restore_files()
{
  # restore all or specific files from backup tarball
  pushd / >/dev/null
  echo "restoring from $FILE..."
  tar -xf "$FILE" $@
  popd >/dev/null
}

function extract_dns_forwarders()
{
  # save the DNS forwarders in /etc/resolv.conf.forwarders
  [ -e /etc/bind/named.conf ] || return
  cp -a /etc/resolv.conf{,.forwarders}
  sed -i -e "/^\s*nameserver/d" /etc/resolv.conf.forwarders
  for ns in `perl -ne 'BEGIN{$/=undef}; m/forwarders\s*{([0-9:;\[\]\.\s]+)}/; $f=$1||""; $f=~s/\s*//g; foreach $fw (split(";",$f)){print "$fw\n"}' /etc/bind/named.conf`; do
    echo "nameserver $ns" >> /etc/resolv.conf.forwarders
  done
}

function restore_dns_forwarders()
{
  # restore the resolv.conf from backup resp. /etc/resolv.conf.forwarders
  if [ "$1" = "frombackup" -a ! -e /etc/resolv.conf.norestore ] ; then
    restore_files etc/resolv.conf.forwarders
  fi
  [ -e /etc/resolv.conf.forwarders ] && cp -a /etc/resolv.conf{.forwarders,}
}

function check_resolv_conf
{
  # check if DNS servers are available and can resolve domain names
  for ns in `grep "^\s*nameserver" /etc/resolv.conf | sed -e "s/\s*nameserver \([[:digit:]\.]\+\)[^[:digit:]\.]*/\1/" ` ; do
    if ! netcat -zu $ns 53 ; then
      echo "Error: Nameserver '$ns' is not available. Please reconfigure /etc/resolv.conf manually."
      exit 1
    fi
    if ! ping -c1 "$PINGSERVER" ; then
      echo "Error: Nameserver '$ns' can not resolve or ping $PINGSERVER. Please reconfigure /etc/resolv.conf manually"
      exit 1
    fi
  done
}

function backup()
{
  # create the backup tarball
  /etc/cron.daily/chef-couchdb-cleanup >/dev/null 2>&1 # to get smaller backups
  extract_dns_forwarders
  rccouchdb stop

  pushd / >/dev/null
  echo "backing up to $FILE..."
  tar -czf "$FILE" $XFILES $BFILES
  popd >/dev/null

  rccouchdb start
  rcchef-server restart
}

function cleanup()
{
  # stop crowbar related services and delete its config files
  # to be used on a deployed crowbar
  extract_dns_forwarders
  restore_dns_forwarders
  pushd / >/dev/null
  for service in crowbar chef-{server,solr,expander,client} couchdb apache2 named dhcpd xinetd rabbitmq-server ; do
    [ -e /etc/init.d/$service ] && /etc/init.d/$service stop
  done
  killall epmd # part of rabbitmq
  killall looper_chef_client.sh
  LOGS=var/log/{crowbar,chef,couchdb,apache2}
  DEPLOYED="var/lib/chef etc/bind etc/dhcp3 etc/xinetd.d/tftp /srv/tftpboot/discovery/pxelinux.cfg/*"
  DFILES="$(echo $BFILES | sed -e 's# root/.ssh # #')"
  rm -rf $DFILES $LOGS $DEPLOYED
  popd >/dev/null
}

function purge()
{
  # cleanup + uninstall all crowbar related packages
  cleanup
  zypper -n rm `rpm -qa|grep -e crowbar -e chef -e rubygem -e susecloud` couchdb createrepo erlang rabbitmq-server sleshammer yum-common bind bind-chrootenv dhcp-server tftp
  rm -rf /opt/dell /var/log/{rabbitmq,nodes,crowbar,couchdb,chef,barclamps} /var/lib/{chef,couchdb,crowbar,dhcp,named,rabbitmq} /var/cache/chef /var/run/{chef,crowbar,named,rabbitmq} /var/chef /etc/sysconfig/{dhcpd,named,rabbitmq-server} /etc/{bind,chef,dhcp3,crowbar}
  killall epmd # need to kill again after uninstall
}

function rabbitmq_get_password()
{
  # read the rabbitmq password for chef from the chef config files
  RABBITPW=`grep --no-filename "^\s*amqp_pass" /etc/chef/{server,solr}.rb | sed -e "s/\s*amqp_pass \"\([^\"]\+\)\"/\1/" | sort | uniq`
  if [ `printf "%s\n" $RABBITPW | wc -l` = 1 ] ; then
    echo -n "$RABBITPW"
  else
    echo -n ""
  fi
}

function reconfigure_rabbitmq()
{
  # clean reconfiguration of rabbitmq
  ## copied from install-suse-cloud
  rabbitmqctl delete_user chef

  # get the original rabbitmq chef password
  rabbit_chef_password=`rabbitmq_get_password`
  # if empty create a new one
  if [ -z "$rabbit_chef_password" ] ; then
    rabbit_chef_password=$( dd if=/dev/urandom count=1 bs=16 2>/dev/null | base64 | tr -d / )
    # write rabbitmq password to /etc/chef/server.rb and solr.rb
    sed -i "s/^\s*amqp_pass .*/amqp_pass \"$rabbit_chef_password\"/" /etc/chef/{server,solr}.rb
  fi

  # create new chef user with proper password and permissions in rabbitmq
  rabbitmqctl add_user chef "$rabbit_chef_password"
  rabbitmqctl set_permissions -p /chef chef ".*" ".*" ".*"
}

function restore()
{
  # restore crowbar from tarball

  restore_dns_forwarders frombackup
  check_resolv_conf

  # install cloud product (expects that the repos are present)
  zypper -n install -l -t pattern cloud_admin
  restore_files

  # calling install-suse-cloud script
  echo -n "Waiting for install-suse-cloud to finish:"
  # copied from qa_crowbarsetup
  screen -d -m -L /bin/bash -c "rm -f /tmp/chef-ready ; install-suse-cloud --verbose ; touch /tmp/chef-ready"
  sleep 2 # need to wait for initial deletion of chef-ready
  n=300
  while [ $n -gt 0 ] && [ ! -e /tmp/chef-ready ] ; do
    n=$(expr $n - 1)
    sleep 5;
    echo -n .
  done
  if [ $n = 0 ] ; then
    echo "timed out waiting for chef-ready"
    exit 83
  fi
  echo

  # restoring files and reconfiguring services
  rccouchdb stop
  restore_files
  reconfigure_rabbitmq
  rccouchdb start
  sleep 20 # wait for couchdb before restarting chef-server
  rcchef-expander restart
  rcchef-solr restart
  rcchef-server restart
  sleep 10
  knife index rebuild -y
  rccrowbar stop

  # need to install the barclamps again in order to create the navigation.rb
  # which is missing after this restore
  /opt/dell/bin/barclamp_install.rb --rpm /opt/dell/barclamps/*
  chown -R crowbar:crowbar /opt/dell/crowbar_framework/config
  raketasks="db:migrate"
  # only cleanup migrations if the sessions migration does not exist
  if ! ls /opt/dell/crowbar_framework/db/migrate/ 2>/dev/null | grep -q ".*_create_sessions.rb" ; then
    ## copied from install-suse-cloud
    rm -rf /opt/dell/crowbar_framework/db/migrate
    rm -f /opt/dell/crowbar_framework/db/{production.sqlite3,schema.rb}
    raketasks="db:sessions:create $raketasks"
  fi
  su -s /bin/sh - crowbar sh -c "cd /opt/dell/crowbar_framework && RAILS_ENV=production rake $raketasks"

  # final chef run
  chef-client
  chkconfig chef-client on
  rcchef-client start
  rccrowbar start
  sleep 120

  # check if crowbar is accessible
  if ! curl -m 59 -s --digest --user crowbar:crowbar localhost:3000 | grep -q /nodes/crowbar ; then
    echo "Error: Could not connect to Crowbar."
    echo "       Please see /var/log/crowbar/production.log for details."
    exit 1
  fi
}

function help()
{
  echo "$0 - An example script to backup and restore crowbar"
  echo
  echo "Usage: $0 [help|backup|restore|cleanup|purge] [<FILE>]"
  echo
  echo " backup [<FILE>]"
  echo "     create a backup tarball of admin node config data in <FILE>"
  echo " restore [<FILE>]"
  echo "     restore a backup of an admin node config from tarball <FILE>"
  echo " cleanup"
  echo "     stop services and delete config files related to crowbar"
  echo " purge"
  echo "     wipe all packages and config files related to crowbar"
  echo
  echo " If <FILE> is omitted it defaults to $FILEDEF"
}

FILE=$(realpath ${2:-$FILEDEF})
declare -a action
action=( $@ )
if [[ ${#action[@]} < 1 ]] ; then
  action[0]='help'
fi

[ -z "$AGREEUNSUPPORTED" ] && case "${action[0]}" in
  help)
  ;;
  *)
    echo "Please Note!"
    echo "This is an unsupported example script. It is a working"
    echo "documentation of the backup and restore process."
    echo "Use with care. You may need to adapt it to your setup."
    read -p "Continue? (y/N) "
    if [[ $REPLY != [yY] ]] ; then
      exit 0
    fi
  ;;
esac

${action[*]}
