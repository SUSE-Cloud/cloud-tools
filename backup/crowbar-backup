#!/bin/bash

# crowbar-backup
#
# A script to backup and restore a crowbar admin node.
# Currently it only supports crowbar on SUSE based distributions.
#
# This script is meant to _document_ the steps needed for a backup and
# restore. You might want to add additional steps.
#
# Enhancements are welcome at:
#   http://github.com/SUSE-Cloud/cloud-tools
#
#
# MIT License
# Copyright (c) 2013-2014, SUSE Linux Products GmbH
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


LOGFILE="/var/log/crowbar/backup-restore.log"

function setup_log ()
{
  # Add logging based on the work in suse-cloud-upgrade
  if [ ! -d /var/log/crowbar/ ]; then
    mkdir -p /var/log/crowbar
  fi

  #Add logging, also keep stdout
  exec >  >(tee -a $LOGFILE)
  exec 2> >(tee -a $LOGFILE >&2)
}

function echo_log ()
{
  echo -e === "$(date '+%F %T %z'): $@"
}

function echo_summary ()
{
  # Also send message with timestamp to logfile
  echo_log $@
  echo -e === $@
}

# files and directories to be backed up
CHEFFILES="etc/chef var/lib/couchdb/chef.couch"
CROWBARFILES="etc/crowbar etc/crowbar.install.key var/lib/crowbar opt/dell/crowbar_framework/config/client.pem"
TFTPFILES="srv/tftpboot/validation.pem srv/tftpboot/nodes"
ROOTFILES="root/.chef root/.ssh root/.gnupg"
ETCFILES="etc/sysconfig/clock etc/resolv.conf.forwarders etc/ntp.conf etc/HOSTNAME etc/hosts"
BFILES="$ROOTFILES $CHEFFILES $CROWBARFILES $TFTPFILES $ETCFILES"

# files and directories to be excluded from backup
EXCLUDEFILES="var/lib/crowbar/cache etc/chef/amqp_passwd"
XFILES=""
for X in $EXCLUDEFILES ; do
  XFILES="--exclude $X $XFILES"
done

# _domainname_ of a server for a ping and DNS test
# can be set via "export pingserver=ping.example.com"
HOSTTEST=${pingserver:-www.suse.com}

# default backup file name
FILEDEF=backup-crowbar.tar.gz

function restore_files()
{
  # restore all or specific files from backup tarball
  echo_summary "Restoring from $FILE..."
  tar -C / -xf "$FILE" $@
}

function extract_dns_forwarders()
{
  # save the DNS forwarders in /etc/resolv.conf.forwarders
  echo "Extracting DNS forwarders"
  [ -e /etc/bind/named.conf ] || return
  cp -a /etc/resolv.conf{,.forwarders}
  sed -i -e "/^\s*nameserver/d" /etc/resolv.conf.forwarders
  for ns in `perl -ne 'BEGIN{$/=undef}; m/forwarders\s*{([0-9:;\[\]\.\s]+)}/; $f=$1||""; $f=~s/\s*//g; foreach $fw (split(";",$f)){print "$fw\n"}' /etc/bind/named.conf`; do
    echo "nameserver $ns" >> /etc/resolv.conf.forwarders
  done
}

function restore_dns_forwarders()
{
  # restore the resolv.conf from backup resp. /etc/resolv.conf.forwarders
  echo "Restoring DNS forwarders"
  if [ "$1" = "frombackup" -a ! -e /etc/resolv.conf.norestore ] ; then
    restore_files etc/resolv.conf.forwarders
  fi
  [ -e /etc/resolv.conf.forwarders ] && cp -a /etc/resolv.conf{.forwarders,}
}

function check_resolv_conf
{
  # check if DNS servers are available and can resolve domain names
  echo "Check if DNS is available and domain resolution works"
  for ns in `grep "^\s*nameserver" /etc/resolv.conf | sed -e "s/\s*nameserver \([[:digit:]\.]\+\)[^[:digit:]\.]*/\1/" ` ; do
    if ! dig @$ns +short "$HOSTTEST" >/dev/null; then
      echo "Error: Nameserver '$ns' can not resolve $HOSTTEST. Please reconfigure /etc/resolv.conf manually"
      exit 1
    fi
  done
}

function backup()
{
  if [ -f "$FILE" ]; then
    echo "$FILE already exists."
    read -p "Do you want to overwrite $FILE? (y/N) "
    if [[ $REPLY != [yY] ]] ; then
      exit 0
    fi
  fi


  # create the backup tarball
  echo_summary "Creating backup"
  /etc/cron.daily/chef-couchdb-cleanup >/dev/null 2>&1 # to get smaller backups
  extract_dns_forwarders

  rcchef-server stop
  rccouchdb stop

  echo "Backing up to $FILE..."
  tar -C / -czf "$FILE" $XFILES $BFILES

  rccouchdb start
  sleep 4
  rcchef-server start
}

function cleanup()
{
  # stop crowbar related services and delete its config files
  # to be used on a deployed crowbar
  echo_summary "Cleaning up the system"
  extract_dns_forwarders
  restore_dns_forwarders
  pushd / >/dev/null
  for service in crowbar chef-{server,solr,expander,client} couchdb apache2 named dhcpd xinetd rabbitmq-server ; do
    [ -e /etc/init.d/$service ] && /etc/init.d/$service stop
  done
  killall epmd # part of rabbitmq
  killall looper_chef_client.sh
  LOGS=var/log/{crowbar,chef,couchdb,apache2}
  DEPLOYED="var/lib/chef etc/bind etc/dhcp3 etc/xinetd.d/tftp /srv/tftpboot/discovery/pxelinux.cfg/*"
  DFILES="$(echo $ROOTFILES $CHEFFILES $CROWBARFILES $TFTPFILES | sed -e 's# root/.ssh # #')"
  rm -rf $DFILES $LOGS $DEPLOYED
  popd >/dev/null
}

function purge()
{
  # cleanup + uninstall all crowbar related packages
  echo_summary "Purging the system"
  cleanup
  zypper -n rm `rpm -qa|grep -e crowbar -e chef -e rubygem -e susecloud` couchdb createrepo erlang rabbitmq-server sleshammer yum-common bind bind-chrootenv dhcp-server tftp
  rm -rf /opt/dell /var/log/{rabbitmq,nodes,crowbar,couchdb,chef,barclamps} /var/lib/{chef,couchdb,crowbar,dhcp,named,rabbitmq} /var/cache/chef /var/run/{chef,crowbar,named,rabbitmq} /var/chef /etc/sysconfig/{dhcpd,named,rabbitmq-server} /etc/{bind,chef,dhcp3,crowbar}
  killall epmd # need to kill again after uninstall
}

function restore()
{
  if ! [ -f "$FILE" ]; then
    echo "$FILE does not exist."
    exit 81
  fi

  if [ -e /opt/dell/crowbar_framework/.crowbar-installed-ok ]; then
    echo "Crowbar seems to already be installed and ready to run."
    read -p "Do you want to overwrite the current setup? (y/N) "
    if [[ $REPLY != [yY] ]] ; then
      exit 0
    fi
    rm /opt/dell/crowbar_framework/.crowbar-installed-ok
  fi

  # restore crowbar from tarball
  echo_summary "Restoring the system from backup"


  restore_dns_forwarders frombackup
  check_resolv_conf

  # install cloud product (expects that the repos are present)
  zypper -n install -l -t pattern cloud_admin

  if ! rpm -q patterns-cloud-admin &> /dev/null; then
    echo "patterns-cloud-admin package is not installed; please install with \"zypper in -t pattern cloud_admin\" or \"zypper in patterns-cloud-admin\"."
    exit 82
  fi

  restore_files etc/crowbar
  restore_files $ETCFILES

  # set the correct hostname
  RESTORE_HOSTNAME=$(cat /etc/HOSTNAME)
  hostname "${RESTORE_HOSTNAME%%.*}"

  # calling install-suse-cloud script
  echo "Waiting for install-suse-cloud to finish:"
  pushd /root  > /dev/null
  screen -d -m -L /bin/bash -c "rm -f /tmp/chef-ready ; install-suse-cloud --verbose ; touch /tmp/chef-ready"
  sleep 2 # need to wait for initial deletion of chef-ready
  popd > /dev/null

  n=300
  while [ $n -gt 0 ] && [ ! -e /tmp/chef-ready ] ; do
    n=$(expr $n - 1)
    sleep 5;
    echo -n .
  done
  if [ $n = 0 ] ; then
    echo "Timed out waiting for install-suse-cloud"
    exit 83
  fi
  echo

  rm /tmp/chef-ready

  # Make sure install finished correctly
  if ! [ -e /opt/dell/crowbar_framework/.crowbar-installed-ok ]; then
    echo "install-suse-cloud didn't complete successfully"
    tail -n 90 /root/screenlog.0
    exit 89
  fi

  rcchef-client stop
  rccrowbar stop

  # restoring files; we stop the services that this impacts before
  for i in chef-server chef-expander chef-solr couchdb rabbitmq-server; do
    service $i stop
  done

  restore_files
  # force-reset the chef AMQP password, since we restored old rabbitmq files
  rm /etc/chef/amqp_passwd

  for i in rabbitmq-server couchdb chef-solr chef-expander chef-server; do
    service $i start
    sleep 4
  done

  knife index rebuild -y

  # Create session store database
  rm -f /opt/dell/crowbar_framework/db/*.sqlite3
  su -s /bin/sh - crowbar sh -c "cd /opt/dell/crowbar_framework && RAILS_ENV=production ./bin/rake db:create db:migrate"

  # final chef run
  chef-client

  chkconfig chef-client on
  rcchef-client start
  rccrowbar start

  sleep 120

  # check if crowbar is accessible
  if ! curl -m 59 -s --digest --user crowbar:crowbar localhost:3000 | grep -q /nodes/crowbar ; then
    echo "Error: Could not connect to Crowbar."
    echo "       Please see /var/log/crowbar/production.log for details."
    exit 1
  fi
  echo_summary "Successfully finished restore"
}

function help()
{
  echo "$0 - Utility to backup and restore Crowbar"
  echo
  echo "Usage: $0 [help|backup|restore|cleanup|purge] [<FILE>]"
  echo
  echo " backup [<FILE>]"
  echo "     create a backup tarball of admin node config data in <FILE>"
  echo " restore [<FILE>]"
  echo "     restore a backup of an admin node config from tarball <FILE>"
  echo " cleanup"
  echo "     stop services and delete config files related to crowbar"
  echo " purge"
  echo "     wipe all packages and config files related to crowbar"
  echo
  echo " If <FILE> is omitted it defaults to $FILEDEF"
}

FILE=$(readlink -m ${2:-$FILEDEF})

if [ $# -ne 1 -a $# -ne 2 ]; then
  help
  exit
fi

action=$1

[ -z "$CB_BACKUP_IGNOREWARNING" ] && case "$action" in
  backup|restore|cleanup|purge)
    echo "This script is a working documentation of the backup and restore process."
    echo "You may need to adapt it to your setup."
    read -p "Continue? (y/N) "
    if [[ $REPLY != [yY] ]] ; then
      exit 0
    fi
    setup_log
  ;;
  help)
  ;;
  *)
    help
    exit 1
  ;;
esac

$action
